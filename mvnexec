#!/bin/bash

#
# Execute clases with main method inside maven project.
#

SET_PARAMS="yes"
BUILD="yes"
CLEAN="yes"
COPY_DEP="yes"
SEARCH_MAIN="yes"
SEARCH_TEST="yes"
FILTER_NAME_PROG="cat -"
AUTO="no"

eval SCRIPT_DEBUG="\$$(basename $0)_DEBUG"
if [ -n "$SCRIPT_DEBUG" ]
then
   set -x
fi

function help {
   cat >&2 <<EOF

$0 [options] [args]

Execute clases with main method inside maven project.

Options
   -P, --no-parameters   Don't ask for parameters.
   -C, --no-clean        Don't clean compilation
   -q, --quiet           Be quiet. Don't show [INFO] messages.
   -B, --no-build        Avoid building. 
   -D, --no-copy-deps    Avoid copy dependencies
   -M, --no-main         Don't search on src/main/java.
   -T, --no-test         Don't search on src/test/java.
   -f, --filter-name     Name filter for classes.
   -a, --auto            If there is only one match launch it.

Examples :

 $ $0
 $ $0 -P
 $ $0 -PqB

EOF
}

function errorJavaExecutable() {
   echo cannot locate java. Set JDK_HOME or JAVA_HOME or add java to path.
   exit 1
}

function testJavaExec() {
   test -x "$1/bin/java"
}

function setJavaExecutable() {
   if [ -z "$1" ] || ! testJavaExec "$1"
   then
      errorJavaExecutable
   else
      JAVA="$1/bin/java"
   fi
}

function findMainClasses() {
   if [ -d $1 ]
   then
      grep " main *(" -R $1/* --exclude-dir=.git --exclude-dir=.svn --exclude-dir=.cvs --include=*.java | \
         cut -d ':' -f 1 | $FILTER_NAME_PROG | sed 's+'$1'/++;s/.java$//' | tr / . | sort
   fi
}

function dependencyClasspath() {
   IFS=. read major minor extra < <($JAVA -version |& awk -F '"' '/version/ {print $2}')
   if [ "$major" == 1 ] && [[ "$minor" > 5 ]]
   then
      echo 'target/dependency/*'
   else
      for i in target/dependency/*.jar
      do 
         echo -n $i:
      done | sed 's/:$//'
   fi
}

function launch() {
   if [ "$CLEAN" == "yes" ]
   then
      echo cleaning...
      mvn $QUIET clean
   fi
   if [ "$BUILD" == "yes" ]
   then
      echo compiling...
      mvn $QUIET install
   fi
   if [ "$COPY_DEP" == "yes" ]
   then
      echo getting dependencies...
      mvn $QUIET dependency:copy-dependencies
   fi
   echo executing $CLASS
   mvn $QUIET exec:exec -Dexec.executable="$JAVA" -Dexec.workingdir="." \
      -Dexec.args="-cp target/classes:target/test-classes:$(dependencyClasspath) ${CLASS}${ARGS} $*"
}

TEMP=$(getopt -o "PqBMTf:DaCh" -l no-parameters,quiet,no-build,no-main,no-test,filter-name:,auto,no-copy-deps,no-clean,help -n $(basename $0) -- "$@")
EXIT=$?
if [ $EXIT != 0 ]
then
   help
   exit $EXIT
fi

# process script arguments
eval set -- "$TEMP"

while true
do
   case "$1" in
      -P|--no-parameters)
         SET_PARAMS=
         ;;
      -B|--no-build) 
         BUILD="no" 
         ;;
      -C|--no-clean) 
         CLEAN="no" 
         ;;
      -D|--no-copy-deps) 
         COPY_DEP="no" 
         ;;
      -q|--quiet) 
         QUIET="-q" 
         ;;
      -M|--no-main)
         SEARCH_MAIN="no"
         ;;
      -T|--no-test)
         SEARCH_TEST="no"
         ;;
      -f|--filter-name)
         ARG=$2
         shift
         FILTER=$ARG
         FILTER_NAME_PROG="grep -i $FILTER"
         ;;
      -a|--auto)
         AUTO="yes"
         ;;
      -h|--help)
         help
         exit
         ;;
      --)
         shift
         break ;;
      *)
         cat <&2 <<EOF

Error, unknow arguments $1
EOF
         help
         exit 1
         ;;
   esac
   shift
done

if [ -n "$JDK_HOME" ]
then
   setJavaExecutable "$JDK_HOME"
elif [ -n "$JAVA_HOME" ]
then
   setJavaExecutable "$JAVA_HOME"
elif command -v java >&-
then
   JAVA=$(command -v java >&-)
else
   errorJavaExecutable
fi


if [ $SEARCH_MAIN == "yes" ]
then
   FOUNDCLASSES=$(findMainClasses src/main/java)
fi

if [ $SEARCH_TEST == "yes" ]
then
   TESTCLASSES=$(findMainClasses src/test/java)
   if [ -n "$TESTCLASSES" ]
   then
      if [ -n "$FOUNDCLASSES" ]
      then
         FOUNDCLASSES="$FOUNDCLASSES
$TESTCLASSES"
      else
         FOUNDCLASSES=$TESTCLASSES
      fi
   fi
fi

if [ -z "$FOUNDCLASSES" ]
then
   echo
   echo no classes with main method in $PWD
   if [ -n "$FILTER" ]
   then
      echo using filter: $FILTER
   fi
   echo
   exit 1
fi

if [ $AUTO == "yes" ] && ! [[ "$FOUNDCLASSES" == $'\n' ]]
then
   CLASS=$FOUNDCLASSES
   launch $*
   exit
fi

select CLASS in ${FOUNDCLASSES}
do
   if [ -z "$CLASS" ]
   then
      if [ "$REPLY" == "salir" ]
      then
         break
      else
         echo unknow option
         continue
      fi
   fi
   if [ -n "$SET_PARAMS" ]
   then
      echo set parameters:
      read -e ARGS
      if [ -n "$ARGS" ]
      then 
         ARGS=" $ARGS"
      fi
   fi
   launch $*
   break
done

